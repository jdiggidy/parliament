name: Deploy iOS

on:
  push:
    branches: [ "main", "staging" ]
    paths:
      - 'lib/**'
      - 'ios/**'
      - '.github/workflows/ios.yaml'

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch config.env file from secret
        env:
          FLUTTER_DOT_ENV: ${{ secrets.FLUTTER_DOT_ENV }}
        run: echo "${FLUTTER_DOT_ENV}" > config.env

      - name: Download GoogleService-Info.plist
        env:
          GOOGLE_SERVICE_INFO_IOS: ${{ secrets.GOOGLE_SERVICE_INFO_IOS }}
        run: echo "${GOOGLE_SERVICE_INFO_IOS}" > ios/Runner/GoogleService-Info.plist

      # Install the Apple certificate and provisioning profile.
      # We use different secrets depending on the branch:
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ github.ref == 'refs/heads/main' && secrets.APPSTORE_CERT_BASE64 || secrets.APPSTORE_CERT_BASE64_STG }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ github.ref == 'refs/heads/main' && secrets.MOBILEPROVISION_BASE64 || secrets.MOBILEPROVISION_BASE64_STG }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # Decode and save certificate and provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # Create and unlock a temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # Import certificate into the keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # Install the provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'

      - run: flutter pub get

      # Use a different export options plist based on branch:
      - name: Build IPA
        run: |
          EXPORT_PLIST="ios/Runner/ExportOptions${{ github.ref == 'refs/heads/main' ? '' : 'STG' }}.plist"
          flutter build ipa --export-options-plist=$EXPORT_PLIST

      # Upload the built IPA as an artifact for the deploy jobs to use:
      - name: Collect IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa/*.ipa

      # Cleanup: remove the temporary keychain and provisioning profile
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  # Deploy job for staging (Firebase App Distribution)
  deploy_ios_firebase:
    name: Deploy to Firebase App Distribution (staging)
    if: github.ref == 'refs/heads/staging'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4

      - name: Download IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: release-ipa

      # If the downloaded artifact is in a subdirectory, move it to the workspace root.
      - name: Move IPA to root directory
        run: mv release-ipa/* .

      # Authenticate with Google Cloud:
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GH_SA_GOOGLE_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Upload IPA to GCS
        run: |
          DATE=$(date +%Y-%m-%d)
          gsutil cp political_think.ipa gs://political-think.appspot.com/ios/parliament-$DATE.ipa

      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          file: political_think.ipa

  # Deploy job for production (direct to Apple App Store Connect)
  deploy_ios_appstore:
    name: Deploy to App Store Connect (production)
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: release-ipa

      - name: Move IPA to root directory
        run: mv release-ipa/* .

      - name: Upload IPA to App Store Connect
        run: |
          # Find the IPA file (assumes only one is present)
          IPA_PATH=$(find . -maxdepth 1 -name "*.ipa" | head -n 1)
          echo "Uploading $IPA_PATH to App Store Connect..."
          # Use xcrun altool to upload the IPA.
          # APPLE_ID is email; APPLE_APP_SPECIFIC_PASSWORD go to appleid.apple.com, in Security section, App-Specific Passwords.
          xcrun altool --upload-app -f "$IPA_PATH" -t ios -u "${{ secrets.APPLE_ID }}" -p "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" --verbose
